failed tests:
c2d1p3d2 = Complex(2.1,3.2)
i2       = Integer(2)
Testing c4d2p6d4 = c2d1p3d2 * i2 produces correct result:
[✘] RESULT:   False
    EXPECTED: True
    >> RESULT   Complex: -1-i
    >> EXPECTED Complex: 4.2 + 6.4i

c2d1p3d2 = Complex(2.1, 3.2)
f2d2     = Float(2.2)
Testing c4d62p7d04 = c2d1p3d2 * f2d2 produces correct result:
[✘] RESULT:   False
    EXPECTED: True
    >> RESULT   Complex: -1-i
    >> EXPECTED Complex: 4.620000000000001 + 7.04i

* Testing Complex setPrecision implementation
************************************************************
Testing c = Complex(1.2345678, 9.1234567) to default 1 decimal place:
[✘] RESULT:   "1.2345678 + 9.1i"
    EXPECTED: "1.2 + 9.1i" OR "1.2+9.1i"
Testing c = Complex(1.2345678, 9.1234567) changed to 4 decimal places:
[✘] RESULT:   "1.2345678 + 9.1235i"
    EXPECTED: "1.2346 + 9.1235i" OR "1.2346+9.1235i"
Testing c = Complex(1.2345678, 9.1234567) changed to 0 decimal places:
[✘] RESULT:   "1.2345678 + 9i"
    EXPECTED: "1 + 9i" OR "1+9i"


c = Complex(0,-2)
Testing Complex.__str__():
[✘] RESULT:   "- 2i"
    EXPECTED: "-2i"

[✘] Provided number of type hints (including return) for __mul__: 2
    Expected number of type hints (including return) for __mul__: 2
        __mul__(self, other: Number) -> Number:
 >> provided types do not match expected:
      (Number.Integer | Number.Float | Number.Complex | int | float --OR-- Number.Number | int | float) 
      ->  Number.Integer | Number.Float | Number.Complex --OR-- Number

************************************************
* CHECKING TYPE HINTS & DOCSTRINGS FOR Float    
************************************************
[✘] Provided number of type hints (including return) for __add__: 2
    Expected number of type hints (including return) for __add__: 2
        __add__(self, other: Number | int | float) -> Number:
 >> provided types do not match expected:
      (Number.Integer | Number.Float | Number.Complex | int | float --OR-- Number.Number | int | float) 
      ->  Number.Float | Number.Complex
[✘] Provided number of type hints (including return) for __mul__: 2
    Expected number of type hints (including return) for __mul__: 2
        __mul__(self, other: Number | int | float) -> Number:
 >> provided types do not match expected:
      (Number.Integer | Number.Float | Number.Complex | int | float --OR-- Number.Number | int | float) 
      ->  Number.Float | Number.Complex

* CHECKING TYPE HINTS & DOCSTRINGS FOR Complex  
************************************************
[✘] Provided number of type hints (including return) for __add__: 0
    Expected number of type hints (including return) for __add__: 2
        __add__(self, other):
 >> incorrect number of hints provided
[✘] Provided number of type hints (including return) for __mul__: 0
    Expected number of type hints (including return) for __mul__: 2
        __mul__(self, other):
 >> incorrect number of hints provided
[✘] Provided number of type hints (including return) for __str__: 0
    Expected number of type hints (including return) for __str__: 1
        __str__(self):
 >> incorrect number of hints provided
[✘] Provided number of type hints (including return) for setPrecision: 0
    Expected number of type hints (including return) for setPrecision: 2
        setPrecision(self, precision):
 >> incorrect number of hints provided

[✘] Appropriate style docstring for __add__ (with Args, Returns):
        __add__(self, other):
              ''' Defines addition for Complex numbers and compatible numeric types.
              '''
 >> too few params in docstring
[✘] Appropriate style docstring for __mul__ (with Args, Returns):
        __mul__(self, other):
              ''' Defines multiplication for Complex numbers and compatible numeric types.
              '''
 >> too few params in docstring
[✘] Appropriate style docstring for __str__ (with Args, Returns):
        __str__(self):
              ''' 
              '''
 >> no returns section in docstring, despite apparent return statement
[✘] Appropriate style docstring for setPrecision (with Args, Returns):
        setPrecision(self, precision):
              ''' 
              '''
 >> too few params in docstring